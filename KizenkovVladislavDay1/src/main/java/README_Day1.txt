Некоторые пояснения:


1. На один уровень с директориями заданий были вынесены:
  1) Класс Валидации с проверкой на неотрицательность в связи с тем, что был использован в задании 3 и 9
    дабы не дублировать код.
  2) Класс исключения в связи с тем, что использовался в двух геометрическиз задачах, где по смыслу подходил опять же
    для экономии кода.
  3) Класс DataScanner в связи с использованием его во всех заданиях. Сделан он в отличе от остальных с конструктором,
    дабы при использовании более одного метода не приходилос в каждом из них создавать обьект класса Scanner.

2. Тесты были сделаны к заданиям 1 и 2 с помощью фреймворка JUnit 5. Файлы тестов расположены в пути
src/test/java/by/javatr/day1/...
   Признаюсь, тест на проверку работы исключения реализовать не удалось. Тот пример что вы показывали на занятии не работает;
и тот, что я нашел на Хабре тоже... Предполагаю, что это связано с 5 версией JUnit.

3. Практически во всех заданиях в бизнес-логике я пользовался классами со статическими методами. Обьясню это тем,
что необходим был всегда всего, как правило, один метод.

4. Валидацию за пределы бизнес-логики не выносил (кроме случая с двумя геометрическими задачами 3 и 9) в связи с тем,
 что эти проверки были слишком узконаправленные и не было смысла создавать отдельный класс рали этого.

5. В задании 10 необходимо было хранить аргумент функции тангенса и его значение. Поэтому я использовал ссылку на Map,
а создавал обьект LinkedHashMap по следующим причинам:
   1) Необходимо было хранить пару значений, а контейнер pair<,> остался в плюсах.
   2) Так как многопоточностью я не пользуюсь, синхронизированные коллекции мне не нужны и выбирая между HashTable
и HashMap выбрал HashMap.
   3) Но так как мне необходимо, чтобы элементы хранились по порядку добавления приложсь использовать LinkedHashMap.



